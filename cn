IP FRAGMENTATION
import math 



def calc(packet_size, MTU_e, header_size):
    packet_size -= header_size
    print(packet_size)
    MTU_e -= header_size
    MTU_e = math.floor((MTU_e/8))*8
    print(MTU_e)
    if(MTU_e > packet_size):
        dont_fragment = 1
    no_frag = math.ceil(packet_size/MTU_e)
    print("No. of fragments", no_frag)

    fragments = [0]*no_frag
    frag_offset = [0]*no_frag
    frag_m = [0]*no_frag

    for i in range(0,no_frag):
        if(i < no_frag-1):
            fragments[i] = MTU_e + header_size
            frag_m[i] = 1
        else:
            fragments[i] = packet_size - (no_frag-1)*MTU_e
            frag_m[i] = 0
    
    temp = 0
    
    for i in range(1, no_frag):
        temp = temp + fragments[i-1] - header_size
        frag_offset[i] = temp/8 
   
    return fragments,frag_offset,frag_m

packet_size = 1800
MTU_e = 1500
header_size = 20
fragments1, frag_offset1, frag_m1 = calc(packet_size, MTU_e, header_size)
print("tot_size", fragments1)
print("frag offset",frag_offset1)
print("more bits", frag_m1)

MTU_e = 572
for i in range(len(fragments1)):
    fragments2, frag_offset2, frag_m2 = calc(fragments1[i], MTU_e, header_size)
    # cat[] += fragments2
    print("tot_size", fragments2)
    print("frag offset",frag_offset2)
    print("more bits", frag_m2)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
djikstra

import sys


graph = [
    [0, 4, 0, 0, 0, 0, 0, 8, 0],
    [4, 0, 8, 0, 0, 0, 0, 11, 0],
    [0, 8, 0, 7, 0, 4, 0, 0, 2],
    [0, 0, 7, 0, 9, 14, 0, 0, 0],
    [0, 0, 0, 9, 0, 10, 0, 0, 0],
    [0, 0, 4, 14, 10, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 1, 6],
    [8, 11, 0, 0, 0, 0, 1, 0, 7],
    [0, 0, 2, 0, 0, 0, 6, 7, 0]
]
def printpath(node, pred, V):
    if pred[node] == -1:
        print(node, end=" ")
        return
    printpath(pred[node], pred, V)
    print("->", node, end=" ")

def printsolution(src, dist, pred, V):
    print("Vertex\tDistance\tPath")
    for node in range(V):
        print(f"{node}\t{dist[node]}\t\t", end="")
        printpath(node, pred, V)
        print()

def mindistance(dist,visitedset,V):
    minimum = 10000000
    for i in range(V):
        if dist[i]<minimum and visitedset[i]==False:
            minimum = dist[i]
            index = i
    return index

def digis(src,V):
    visitedset = [False]*V
    dist = [sys.maxsize]*V
    pred = [-1]*V
    dist[src]=0
    for i in range(V):
        x = mindistance(dist,visitedset,V)
        visitedset[x]=True
        for y in range(V):
            if dist[x] + graph[x][y] < dist[y] and visitedset[y]==False and graph[x][y]>0:
                dist[y] = graph[x][y]+dist[x]
                pred[y] = x
    printsolution(src,dist,pred,V)
   
digis(0,9)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
bellman_ford
import sys

def print_path(node, pred, V):
    if pred[node] == -1:
        print(node, end=" ")
        return
    print_path(pred[node], pred, V)
    print("->", node, end=" ")

def print_solution(src, dist, pred, V):
    print("Vertex\tDistance\tPath")
    for node in range(V):
        print(f"{node}\t{dist[node]}\t\t", end="")
        print_path(node, pred, V)
        print()

def bellman_ford(graph, src, V):
    dist = [float('inf')] * V
    pred = [-1] * V
    dist[src] = 0

    # Relax edges repeatedly
    for _ in range(V - 1):
        for u in range(V):
            for v in range(V):
                if graph[u][v] != 0 and dist[u] != float('inf') and dist[u] + graph[u][v] < dist[v]:
                    dist[v] = dist[u] + graph[u][v]
                    pred[v] = u

    # Check for negative cycles
    for u in range(V):
        for v in range(V):
            if graph[u][v] != 0 and dist[u] != float('inf') and dist[u] + graph[u][v] < dist[v]:
                print("Graph contains negative weight cycle")
                return

    print_solution(src, dist, pred, V)

if __name__ == "__main__":
    graph = [
        [0, 4, 0, 0, 0, 0, 0, 8, 0],
        [4, 0, 8, 0, 0, 0, 0, 11, 0],
        [0, 8, 0, 7, 0, 4, 0, 0, 2],
        [0, 0, 7, 0, 9, 14, 0, 0, 0],
        [0, 0, 0, 9, 0, 10, 0, 0, 0],
        [0, 0, 4, 14, 10, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 2, 0, 1, 6],
        [8, 11, 0, 0, 0, 0, 1, 0, 7],
        [0, 0, 2, 0, 0, 0, 6, 7, 0]
    ]
    V = len(graph)
    bellman_ford(graph, 0, V)
